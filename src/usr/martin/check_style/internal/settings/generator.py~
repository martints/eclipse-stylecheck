#!/usr/bin/python

BASE_PATH = 'src/usr/martin/check_style/'

AUTOGENERATED_WARNING = \
      "/**********************\n" \
    + " *                    *\n" \
    + " * AUTOGENERATED FILE *\n" \
    + " *                    *\n" \
    + " *    DO NOT EDIT     *\n" \
    + " *                    *\n" \
    + " **********************/\n" \

class Entry:
    def __init__(self, name, entry_text = ""):
        self.name = name
        self.entry_text = entry_text
        
        print self.get_getter_name()
        
    def get_getter_name(self):
        l = self.name.split("_")
        r = "".join([n[0].upper() + n[1:] for n in self.name.split("_")])
        if l[0] in ['has', 'may', 'is']:
            return r[0].lower() + r[1:]
        else:
            return 'get' + r
        
    def getJavaConstantName(self):
        return self.name.upper()
        
    def write_constants(self, f):
        f.write('\n\n\tString %s = "%s";' % (self.getJavaConstantName(), self.name))
            
    def write_create_field_editor(self, f):
        f.write('        addField(new %s(\n' % self.get_field_editor())
        f.write('                SettingsNames.%s,\n' % self.getJavaConstantName())
        f.write('                "%s",\n' % self.entry_text,)
        f.write('                getFieldEditorParent()\n')
        f.write('                ));\n')

    def write_getter(self, f):
        f.write('\n')
        f.write('    public final %s %s() {\n' % (self.get_java_type(), self.get_getter_name()))
        f.write('        return settingsSource.get%s%s(%s);\n' % (
                self.get_java_type()[0].upper(), 
                self.get_java_type()[1:],
                self.getJavaConstantName()
                ))
        f.write('    }\n')
       

class Boolean(Entry):

    def __init__(self, name, default_ = False, entry_text = ""):
        Entry.__init__(self, name, entry_text)
        self.default_ = default_
        
    def write_set_defaults(self, f):
        if self.default_:
            f.write('        store.setDefault(%s, true);\n' % self.getJavaConstantName())
        else: 
            f.write('        store.setDefault(%s, false);\n' % self.getJavaConstantName())

    def get_field_editor(self):
        return 'BooleanFieldEditor'
        
    def get_java_type(self):
        return 'boolean'
        


def write_constants(entries):
    f = open(BASE_PATH + 'internal/settings/SettingsNames.java', "w")
    f.write(AUTOGENERATED_WARNING)
    f.write("""
package usr.martin.check_style.internal.settings;

/**
 * Constants for the names of the properties 
 */
public interface SettingsNames {
	String USE_PROJECT_SETTINGS = "use_project_settings";""")
    for e in entries:
        e.write_constants(f)
    f.write("\n}\n")
    f.close()



def write_initializer(entries):
    f = open(BASE_PATH + 'internal/settings/PreferenceInitializer.java', "w")
    f.write(AUTOGENERATED_WARNING)
    f.write("""
package usr.martin.check_style.internal.settings;

import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
import org.eclipse.jface.preference.IPreferenceStore;

import usr.martin.check_style.Activator;

/**
 * Class used to initialize default preference values.
 */
public class PreferenceInitializer
		extends AbstractPreferenceInitializer 
		implements SettingsNames {

	public void initializeDefaultPreferences() {
		IPreferenceStore store = Activator.getInstance().getPreferenceStore();
		
		// Set all values to their defaults
""")
    for e in entries:
        e.write_set_defaults(f)
    f.write("\n    }\n}\n")
    f.close()

def write_preference_page(entries):
    f = open(BASE_PATH + 'preferences/CheckStylePreferencePage.java', "w")
    f.write(AUTOGENERATED_WARNING)
    f.write("""
package usr.martin.check_style.preferences;

import org.eclipse.jface.preference.*;
import org.eclipse.ui.IWorkbenchPreferencePage;
import org.eclipse.ui.IWorkbench;
import usr.martin.check_style.Activator;
import usr.martin.check_style.internal.settings.SettingsNames;

/**
 * This class contains the global settings for the style-check
 * plugin.
 */

public class CheckStylePreferencePage
		extends FieldEditorPreferencePage
		implements IWorkbenchPreferencePage {

	public CheckStylePreferencePage() { 
		super(GRID);
		setPreferenceStore(Activator.getInstance().getPreferenceStore());
		setDescription("Settings for the Style-Checker");
	}
	
	public void init(IWorkbench workbench) {
	}
	
	public void createFieldEditors() {
""")
    for e in entries:
        e.write_create_field_editor(f)
    f.write("\n    }\n}\n")
    f.close()


def write_easy_access_methods(entries):
    f = open(BASE_PATH + 'CheckStyleSettings.java', "w")
    f.write(AUTOGENERATED_WARNING)
    f.write("""
package usr.martin.check_style;

import org.eclipse.core.resources.IProject; 


public final class CheckStyleSettings
		extends AbstractCheckStyleSettings{
	public CheckStyleSettings(IProject project_) {
		super(project_);
	}
""")
    for e in entries:
        e.write_getter(f)
    f.write("\n}\n")
    f.close()


entries = [
    Boolean(
        'may_use_static_imports', False,
        entry_text = 'Are &static imports allowed?'
        ),
    Boolean(
        'may_use_wildcard_imports', False,
        entry_text = 'Are &wildcard imports allowed?'
        ),
    ]


write_constants(entries)
write_initializer(entries)
write_preference_page(entries)
write_easy_access_methods(entries)

